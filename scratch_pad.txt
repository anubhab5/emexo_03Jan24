    <!-- Advanced Selector Start -->
div>p

<h2>Child Selector</h2>

<p>The child selector (>) selects all elements that are the children of a specified element.</p>

<div>
  <p>Paragraph 1 in the div.</p>
  <p>Paragraph 2 in the div.</p>
  <section>
    <!-- not Child but Descendant -->
    <p>Paragraph 3 in the div (inside a section element).</p>
  </section>
  <p>Paragraph 4 in the div.</p>
</div>

<p>Paragraph 5. Not in a div.</p>
<p>Paragraph 6. Not in a div.</p>


---

div + p

<h2>Adjacent Sibling Selector</h2>

<p>The + selector is used to select an element that is directly after another specific element.</p>
<p>The following example selects the first p element that are placed immediately after div elements:</p>

<div>
  <p>Paragraph 1 in the div.</p>
  <p>Paragraph 2 in the div.</p>
</div>

<p>Paragraph 3. After a div.</p>
<p>Paragraph 4. After a div.</p>

<div>
  <p>Paragraph 5 in the div.</p>
  <p>Paragraph 6 in the div.</p>
</div>

<p>Paragraph 7. After a div.</p>
<p>Paragraph 8. After a div.</p>

<!-- Advanced Selectors End -->

---

div ~ p

<h2>General Sibling Selector</h2>

<p>The general sibling selector (~) selects all elements that are next siblings of a specified element.</p>

<p>Paragraph 1.</p>

<div>
  <p>Paragraph 2.</p>
</div>

<p>Paragraph 3.</p>
<code>Some code.</code>
<p>Paragraph 4.</p>


---
animation

div {
  width: 100px;
  height: 100px;
  background: red;
  transition-property: width;
  transition-duration: 2s;
  transition-timing-function: cubic-bezier();
  transition-delay: 0s;
}

div:hover {
  width: 300px;
}


div.a {
  width: 150px;
  height: 80px;
  background-color: yellow;
  transform: rotate(20deg);
}

div.b {
  width: 150px;
  height: 80px;
  background-color: yellow;
  transform: skewY(20deg);
}

div.c {
  width: 150px;
  height: 80px;
  background-color: yellow;
  transform: scaleY(1.5);
}


Pseudo-class

:hover
:first-child
:last-child
:nth-child(n)
:nth-last-child(n)
:focus

Pseudo-element
::first-line
::first-letter
::before
::after
::selection


attribute

a[target="_blank"] {
  background-color: yellow;
}



const container = document.getElementById('container');
// const myClass = document.getElementsByClassName('my-class');

// container.style.background = 'red';
// container.style.color = 'yellow';
// container.style.padding = '10px';
// container.innerText = 'INDIA'
// console.log(container.innerHTML);

// Create an element

const newSpan = document.createElement("span");
const spanText = document.createTextNode("This is span content");
newSpan.appendChild(spanText);
container.appendChild(newSpan);

newSpan.classList.add('color-red');

function myFunction(x) {
   x.classList.toggle("fa-thumbs-down");
}


function Min(limit: number) {
  return function(target: Object, propertyKey: string) { 
    let value : string;
    const getter = function() {
      return value;
    };
    const setter = function(newVal: string) {
       if(newVal.length < limit) {
        Object.defineProperty(target, 'errors', {
          value: `Your password should be bigger than ${limit}`
        });
      }
      else {
        value = newVal;
      }      
    }; 
    Object.defineProperty(target, propertyKey, {
      get: getter,
      set: setter
    }); 
  }
}

class User {
    username: string;

    @Min(13)
    password: string;
    
    constructor(username: string, password: string){
        this.username = username;
        this.password = password;
    }    
}

    let danyUser = new User("dany", "pass");
    console.log(danyUser);
    console.log(danyUser.errors);


    [ngClass]="{'my_class': step === 'step1'}"

<div [ngStyle]="{'background-color':person.country === 'UK' ? 'green' : 'red' }"></<div>